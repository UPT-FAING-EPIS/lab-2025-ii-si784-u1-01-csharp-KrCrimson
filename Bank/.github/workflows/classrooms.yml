name: Autograding Tests
'on':
- push
- repository_dispatch
permissions:
  checks: write
  actions: read
  contents: read
jobs:
  run-autograding-tests:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: t1
      id: t1
      uses: classroom-resources/autograding-command-grader@v1
      with:
        test-name: t1
        setup-command: export HOME='/home/runner' && cd Bank && dotnet restore
        command: export HOME='/home/runner' && cd Bank && dotnet test
        timeout: 10
        max-score: 4
    - name: Build NuGet package
      run: |
        cd Bank
        dotnet pack Bank.Domain/Bank.Domain.csproj --configuration Release --output ./nupkg
    - name: Publish to GitHub Packages
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd Bank/nupkg
        dotnet nuget push "*.nupkg" --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --api-key $NUGET_AUTH_TOKEN --skip-duplicate
    - name: Create GitHub Release for v1.0.0
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Verifica si existe un tag v1.0.0, si no lo crea
        git fetch --tags
        if ! git rev-parse v1.0.0 >/dev/null 2>&1; then
          git tag v1.0.0
          git push origin v1.0.0
        fi
        # Obtiene los mensajes de los commits desde el Ãºltimo tag (o todos si es el primero)
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"* %s")
        else
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"* %s")
        fi
        # Crea el release usando la API de GitHub
        gh release create v1.0.0 --title "Release v1.0.0" --notes "$COMMITS" || echo "Release ya existe"
      shell: bash
    - name: t2
      id: t2
      uses: classroom-resources/autograding-command-grader@v1
      with:
        test-name: t2
        setup-command: ''
        command: ls -la cobertura.png
        timeout: 10
        max-score: 4
    - name: t3
      id: t3
      uses: classroom-resources/autograding-command-grader@v1
      with:
        test-name: t3
        setup-command: ''
        command: cat  .github/workflows/sonar.yml | grep nuget
        timeout: 10
        max-score: 6
    - name: t4
      id: t4
      uses: classroom-resources/autograding-command-grader@v1
      with:
        test-name: t4
        setup-command: ''
        command: cat .github/workflows/sonar.yml
        timeout: 10
        max-score: 6
    - name: Autograding Reporter
      uses: classroom-resources/autograding-grading-reporter@v1
      env:
        T1_RESULTS: "${{steps.t1.outputs.result}}"
        T2_RESULTS: "${{steps.t2.outputs.result}}"
        T3_RESULTS: "${{steps.t3.outputs.result}}"
        T4_RESULTS: "${{steps.t4.outputs.result}}"
      with:
        runners: t1,t2,t3,t4
