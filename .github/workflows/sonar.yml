name: Sonar Continuos Integration
  # Este workflow puede incluir pasos para publicar paquetes nuget
env:
  DOTNET_VERSION: '8.x'                     # la versi칩n de .NET
  SONAR_ORG: 'krcrimson'                    # Nombre de la organizaci칩n de sonar cloud
  SONAR_PROJECT: 'krcrimson_apibank'        # Key ID del proyecto de sonar
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  sonarqube:
    name: Sonarqube Analisys
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Verify repo structure
        run: |
          pwd
          ls -la
          if [ ! -d "Bank" ]; then
            echo "ERROR: 'Bank' folder not found at repository root.";
            exit 1;
          fi
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Configurando la versi칩n de NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Instalar Scanner
        run: dotnet tool install -g dotnet-sonarscanner
      - name: Ejecutar pruebas y an치lisis Sonar
        run: |
          echo "SONAR_ORG=${{ env.SONAR_ORG }}" && echo "SONAR_PROJECT=${{ env.SONAR_PROJECT }}"
          dotnet restore
          dotnet-sonarscanner begin /k:"${{ env.SONAR_PROJECT }}" /o:"${{ env.SONAR_ORG }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="*/*/*/coverage.opencover.xml" /d:sonar.qualitygate.wait=true
          dotnet build
          dotnet test --collect:"XPlat Code Coverage;Format=opencover"
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}" || true
        working-directory: Bank
      - name: Build NuGet package
        run: dotnet pack Bank.Domain/Bank.Domain.csproj -c Release -o ./nupkg /p:PackageVersion=1.0.0
        working-directory: Bank
      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dotnet nuget push "*.nupkg" --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --api-key $NUGET_AUTH_TOKEN --skip-duplicate
        working-directory: Bank/nupkg
      - name: Create GitHub Release v1.0.0
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags
          if ! git rev-parse v1.0.0 >/dev/null 2>&1; then
            git tag v1.0.0
            git push origin v1.0.0
          fi
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"* %s")
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"* %s")
          fi
          echo "Creating release notes:" && echo "$COMMITS"
          gh release create v1.0.0 --title "Release v1.0.0" --notes "$COMMITS" || echo "Release ya existe"